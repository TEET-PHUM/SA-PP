// Code generated by entc, DO NOT EDIT.

package foodmenu

const (
	// Label holds the string label denoting the foodmenu type in the database.
	Label = "foodmenu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMenuing holds the string denoting the menuing field in the database.
	FieldMenuing = "menuing"
	// FieldAddedtime holds the string denoting the addedtime field in the database.
	FieldAddedtime = "addedtime"
	// FieldGroupid holds the string denoting the groupid field in the database.
	FieldGroupid = "groupid"
	// FieldTypeid holds the string denoting the typeid field in the database.
	FieldTypeid = "typeid"
	// FieldCalories holds the string denoting the calories field in the database.
	FieldCalories = "calories"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeEatinghistorys holds the string denoting the eatinghistorys edge name in mutations.
	EdgeEatinghistorys = "eatinghistorys"

	// Table holds the table name of the foodmenu in the database.
	Table = "foodmenus"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "foodmenus"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// EatinghistorysTable is the table the holds the eatinghistorys relation/edge.
	EatinghistorysTable = "eatinghistories"
	// EatinghistorysInverseTable is the table name for the Eatinghistory entity.
	// It exists in this package in order to avoid circular dependency with the "eatinghistory" package.
	EatinghistorysInverseTable = "eatinghistories"
	// EatinghistorysColumn is the table column denoting the eatinghistorys relation/edge.
	EatinghistorysColumn = "foodmenu_id"
)

// Columns holds all SQL columns for foodmenu fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMenuing,
	FieldAddedtime,
	FieldGroupid,
	FieldTypeid,
	FieldCalories,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Foodmenu type.
var ForeignKeys = []string{
	"owner_id",
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// MenuingValidator is a validator for the "menuing" field. It is called by the builders before save.
	MenuingValidator func(string) error
	// AddedtimeValidator is a validator for the "addedtime" field. It is called by the builders before save.
	AddedtimeValidator func(string) error
	// GroupidValidator is a validator for the "groupid" field. It is called by the builders before save.
	GroupidValidator func(int) error
	// TypeidValidator is a validator for the "typeid" field. It is called by the builders before save.
	TypeidValidator func(int) error
	// CaloriesValidator is a validator for the "calories" field. It is called by the builders before save.
	CaloriesValidator func(int) error
)
