// Code generated by entc, DO NOT EDIT.

package foodmenu

import (
	"github.com/Teeth/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Menuing applies equality check predicate on the "menuing" field. It's identical to MenuingEQ.
func Menuing(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuing), v))
	})
}

// Addedtime applies equality check predicate on the "addedtime" field. It's identical to AddedtimeEQ.
func Addedtime(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// Groupid applies equality check predicate on the "groupid" field. It's identical to GroupidEQ.
func Groupid(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupid), v))
	})
}

// Typeid applies equality check predicate on the "typeid" field. It's identical to TypeidEQ.
func Typeid(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeid), v))
	})
}

// Calories applies equality check predicate on the "calories" field. It's identical to CaloriesEQ.
func Calories(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalories), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// MenuingEQ applies the EQ predicate on the "menuing" field.
func MenuingEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuing), v))
	})
}

// MenuingNEQ applies the NEQ predicate on the "menuing" field.
func MenuingNEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuing), v))
	})
}

// MenuingIn applies the In predicate on the "menuing" field.
func MenuingIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMenuing), v...))
	})
}

// MenuingNotIn applies the NotIn predicate on the "menuing" field.
func MenuingNotIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMenuing), v...))
	})
}

// MenuingGT applies the GT predicate on the "menuing" field.
func MenuingGT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuing), v))
	})
}

// MenuingGTE applies the GTE predicate on the "menuing" field.
func MenuingGTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuing), v))
	})
}

// MenuingLT applies the LT predicate on the "menuing" field.
func MenuingLT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuing), v))
	})
}

// MenuingLTE applies the LTE predicate on the "menuing" field.
func MenuingLTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuing), v))
	})
}

// MenuingContains applies the Contains predicate on the "menuing" field.
func MenuingContains(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMenuing), v))
	})
}

// MenuingHasPrefix applies the HasPrefix predicate on the "menuing" field.
func MenuingHasPrefix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMenuing), v))
	})
}

// MenuingHasSuffix applies the HasSuffix predicate on the "menuing" field.
func MenuingHasSuffix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMenuing), v))
	})
}

// MenuingEqualFold applies the EqualFold predicate on the "menuing" field.
func MenuingEqualFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMenuing), v))
	})
}

// MenuingContainsFold applies the ContainsFold predicate on the "menuing" field.
func MenuingContainsFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMenuing), v))
	})
}

// AddedtimeEQ applies the EQ predicate on the "addedtime" field.
func AddedtimeEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeNEQ applies the NEQ predicate on the "addedtime" field.
func AddedtimeNEQ(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedtime), v))
	})
}

// AddedtimeIn applies the In predicate on the "addedtime" field.
func AddedtimeIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeNotIn applies the NotIn predicate on the "addedtime" field.
func AddedtimeNotIn(vs ...string) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedtime), v...))
	})
}

// AddedtimeGT applies the GT predicate on the "addedtime" field.
func AddedtimeGT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeGTE applies the GTE predicate on the "addedtime" field.
func AddedtimeGTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLT applies the LT predicate on the "addedtime" field.
func AddedtimeLT(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedtime), v))
	})
}

// AddedtimeLTE applies the LTE predicate on the "addedtime" field.
func AddedtimeLTE(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedtime), v))
	})
}

// AddedtimeContains applies the Contains predicate on the "addedtime" field.
func AddedtimeContains(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddedtime), v))
	})
}

// AddedtimeHasPrefix applies the HasPrefix predicate on the "addedtime" field.
func AddedtimeHasPrefix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddedtime), v))
	})
}

// AddedtimeHasSuffix applies the HasSuffix predicate on the "addedtime" field.
func AddedtimeHasSuffix(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddedtime), v))
	})
}

// AddedtimeEqualFold applies the EqualFold predicate on the "addedtime" field.
func AddedtimeEqualFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddedtime), v))
	})
}

// AddedtimeContainsFold applies the ContainsFold predicate on the "addedtime" field.
func AddedtimeContainsFold(v string) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddedtime), v))
	})
}

// GroupidEQ applies the EQ predicate on the "groupid" field.
func GroupidEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupid), v))
	})
}

// GroupidNEQ applies the NEQ predicate on the "groupid" field.
func GroupidNEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupid), v))
	})
}

// GroupidIn applies the In predicate on the "groupid" field.
func GroupidIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupid), v...))
	})
}

// GroupidNotIn applies the NotIn predicate on the "groupid" field.
func GroupidNotIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupid), v...))
	})
}

// GroupidGT applies the GT predicate on the "groupid" field.
func GroupidGT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupid), v))
	})
}

// GroupidGTE applies the GTE predicate on the "groupid" field.
func GroupidGTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupid), v))
	})
}

// GroupidLT applies the LT predicate on the "groupid" field.
func GroupidLT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupid), v))
	})
}

// GroupidLTE applies the LTE predicate on the "groupid" field.
func GroupidLTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupid), v))
	})
}

// TypeidEQ applies the EQ predicate on the "typeid" field.
func TypeidEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeid), v))
	})
}

// TypeidNEQ applies the NEQ predicate on the "typeid" field.
func TypeidNEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeid), v))
	})
}

// TypeidIn applies the In predicate on the "typeid" field.
func TypeidIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeid), v...))
	})
}

// TypeidNotIn applies the NotIn predicate on the "typeid" field.
func TypeidNotIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeid), v...))
	})
}

// TypeidGT applies the GT predicate on the "typeid" field.
func TypeidGT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeid), v))
	})
}

// TypeidGTE applies the GTE predicate on the "typeid" field.
func TypeidGTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeid), v))
	})
}

// TypeidLT applies the LT predicate on the "typeid" field.
func TypeidLT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeid), v))
	})
}

// TypeidLTE applies the LTE predicate on the "typeid" field.
func TypeidLTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeid), v))
	})
}

// CaloriesEQ applies the EQ predicate on the "calories" field.
func CaloriesEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCalories), v))
	})
}

// CaloriesNEQ applies the NEQ predicate on the "calories" field.
func CaloriesNEQ(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCalories), v))
	})
}

// CaloriesIn applies the In predicate on the "calories" field.
func CaloriesIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCalories), v...))
	})
}

// CaloriesNotIn applies the NotIn predicate on the "calories" field.
func CaloriesNotIn(vs ...int) predicate.Foodmenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Foodmenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCalories), v...))
	})
}

// CaloriesGT applies the GT predicate on the "calories" field.
func CaloriesGT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCalories), v))
	})
}

// CaloriesGTE applies the GTE predicate on the "calories" field.
func CaloriesGTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCalories), v))
	})
}

// CaloriesLT applies the LT predicate on the "calories" field.
func CaloriesLT(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCalories), v))
	})
}

// CaloriesLTE applies the LTE predicate on the "calories" field.
func CaloriesLTE(v int) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCalories), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEatinghistorys applies the HasEdge predicate on the "eatinghistorys" edge.
func HasEatinghistorys() predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EatinghistorysTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EatinghistorysTable, EatinghistorysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEatinghistorysWith applies the HasEdge predicate on the "eatinghistorys" edge with a given conditions (other predicates).
func HasEatinghistorysWith(preds ...predicate.Eatinghistory) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EatinghistorysInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EatinghistorysTable, EatinghistorysColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Foodmenu) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Foodmenu) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Foodmenu) predicate.Foodmenu {
	return predicate.Foodmenu(func(s *sql.Selector) {
		p(s.Not())
	})
}
