// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/taste"
	"github.com/Teeth/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEatinghistory = "Eatinghistory"
	TypeFoodmenu      = "Foodmenu"
	TypeMealplan      = "Mealplan"
	TypeTaste         = "Taste"
	TypeUser          = "User"
)

// EatinghistoryMutation represents an operation that mutate the Eatinghistories
// nodes in the graph.
type EatinghistoryMutation struct {
	config
	op              Op
	typ             string
	id              *int
	added_time      *time.Time
	clearedFields   map[string]struct{}
	mealplan        *int
	clearedmealplan bool
	foodmenu        *int
	clearedfoodmenu bool
	taste           *int
	clearedtaste    bool
	user            *int
	cleareduser     bool
	done            bool
	oldValue        func(context.Context) (*Eatinghistory, error)
}

var _ ent.Mutation = (*EatinghistoryMutation)(nil)

// eatinghistoryOption allows to manage the mutation configuration using functional options.
type eatinghistoryOption func(*EatinghistoryMutation)

// newEatinghistoryMutation creates new mutation for $n.Name.
func newEatinghistoryMutation(c config, op Op, opts ...eatinghistoryOption) *EatinghistoryMutation {
	m := &EatinghistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeEatinghistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEatinghistoryID sets the id field of the mutation.
func withEatinghistoryID(id int) eatinghistoryOption {
	return func(m *EatinghistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Eatinghistory
		)
		m.oldValue = func(ctx context.Context) (*Eatinghistory, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Eatinghistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEatinghistory sets the old Eatinghistory of the mutation.
func withEatinghistory(node *Eatinghistory) eatinghistoryOption {
	return func(m *EatinghistoryMutation) {
		m.oldValue = func(context.Context) (*Eatinghistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EatinghistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EatinghistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EatinghistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the added_time field.
func (m *EatinghistoryMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *EatinghistoryMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Eatinghistory.
// If the Eatinghistory object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EatinghistoryMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *EatinghistoryMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetMealplanID sets the mealplan edge to Mealplan by id.
func (m *EatinghistoryMutation) SetMealplanID(id int) {
	m.mealplan = &id
}

// ClearMealplan clears the mealplan edge to Mealplan.
func (m *EatinghistoryMutation) ClearMealplan() {
	m.clearedmealplan = true
}

// MealplanCleared returns if the edge mealplan was cleared.
func (m *EatinghistoryMutation) MealplanCleared() bool {
	return m.clearedmealplan
}

// MealplanID returns the mealplan id in the mutation.
func (m *EatinghistoryMutation) MealplanID() (id int, exists bool) {
	if m.mealplan != nil {
		return *m.mealplan, true
	}
	return
}

// MealplanIDs returns the mealplan ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MealplanID instead. It exists only for internal usage by the builders.
func (m *EatinghistoryMutation) MealplanIDs() (ids []int) {
	if id := m.mealplan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMealplan reset all changes of the "mealplan" edge.
func (m *EatinghistoryMutation) ResetMealplan() {
	m.mealplan = nil
	m.clearedmealplan = false
}

// SetFoodmenuID sets the foodmenu edge to Foodmenu by id.
func (m *EatinghistoryMutation) SetFoodmenuID(id int) {
	m.foodmenu = &id
}

// ClearFoodmenu clears the foodmenu edge to Foodmenu.
func (m *EatinghistoryMutation) ClearFoodmenu() {
	m.clearedfoodmenu = true
}

// FoodmenuCleared returns if the edge foodmenu was cleared.
func (m *EatinghistoryMutation) FoodmenuCleared() bool {
	return m.clearedfoodmenu
}

// FoodmenuID returns the foodmenu id in the mutation.
func (m *EatinghistoryMutation) FoodmenuID() (id int, exists bool) {
	if m.foodmenu != nil {
		return *m.foodmenu, true
	}
	return
}

// FoodmenuIDs returns the foodmenu ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FoodmenuID instead. It exists only for internal usage by the builders.
func (m *EatinghistoryMutation) FoodmenuIDs() (ids []int) {
	if id := m.foodmenu; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFoodmenu reset all changes of the "foodmenu" edge.
func (m *EatinghistoryMutation) ResetFoodmenu() {
	m.foodmenu = nil
	m.clearedfoodmenu = false
}

// SetTasteID sets the taste edge to Taste by id.
func (m *EatinghistoryMutation) SetTasteID(id int) {
	m.taste = &id
}

// ClearTaste clears the taste edge to Taste.
func (m *EatinghistoryMutation) ClearTaste() {
	m.clearedtaste = true
}

// TasteCleared returns if the edge taste was cleared.
func (m *EatinghistoryMutation) TasteCleared() bool {
	return m.clearedtaste
}

// TasteID returns the taste id in the mutation.
func (m *EatinghistoryMutation) TasteID() (id int, exists bool) {
	if m.taste != nil {
		return *m.taste, true
	}
	return
}

// TasteIDs returns the taste ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TasteID instead. It exists only for internal usage by the builders.
func (m *EatinghistoryMutation) TasteIDs() (ids []int) {
	if id := m.taste; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTaste reset all changes of the "taste" edge.
func (m *EatinghistoryMutation) ResetTaste() {
	m.taste = nil
	m.clearedtaste = false
}

// SetUserID sets the user edge to User by id.
func (m *EatinghistoryMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *EatinghistoryMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *EatinghistoryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *EatinghistoryMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EatinghistoryMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *EatinghistoryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *EatinghistoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Eatinghistory).
func (m *EatinghistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EatinghistoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.added_time != nil {
		fields = append(fields, eatinghistory.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EatinghistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eatinghistory.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EatinghistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eatinghistory.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Eatinghistory field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EatinghistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eatinghistory.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Eatinghistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EatinghistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EatinghistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EatinghistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Eatinghistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EatinghistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EatinghistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EatinghistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Eatinghistory nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EatinghistoryMutation) ResetField(name string) error {
	switch name {
	case eatinghistory.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown Eatinghistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EatinghistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.mealplan != nil {
		edges = append(edges, eatinghistory.EdgeMealplan)
	}
	if m.foodmenu != nil {
		edges = append(edges, eatinghistory.EdgeFoodmenu)
	}
	if m.taste != nil {
		edges = append(edges, eatinghistory.EdgeTaste)
	}
	if m.user != nil {
		edges = append(edges, eatinghistory.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EatinghistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eatinghistory.EdgeMealplan:
		if id := m.mealplan; id != nil {
			return []ent.Value{*id}
		}
	case eatinghistory.EdgeFoodmenu:
		if id := m.foodmenu; id != nil {
			return []ent.Value{*id}
		}
	case eatinghistory.EdgeTaste:
		if id := m.taste; id != nil {
			return []ent.Value{*id}
		}
	case eatinghistory.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EatinghistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EatinghistoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EatinghistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedmealplan {
		edges = append(edges, eatinghistory.EdgeMealplan)
	}
	if m.clearedfoodmenu {
		edges = append(edges, eatinghistory.EdgeFoodmenu)
	}
	if m.clearedtaste {
		edges = append(edges, eatinghistory.EdgeTaste)
	}
	if m.cleareduser {
		edges = append(edges, eatinghistory.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EatinghistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case eatinghistory.EdgeMealplan:
		return m.clearedmealplan
	case eatinghistory.EdgeFoodmenu:
		return m.clearedfoodmenu
	case eatinghistory.EdgeTaste:
		return m.clearedtaste
	case eatinghistory.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EatinghistoryMutation) ClearEdge(name string) error {
	switch name {
	case eatinghistory.EdgeMealplan:
		m.ClearMealplan()
		return nil
	case eatinghistory.EdgeFoodmenu:
		m.ClearFoodmenu()
		return nil
	case eatinghistory.EdgeTaste:
		m.ClearTaste()
		return nil
	case eatinghistory.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Eatinghistory unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EatinghistoryMutation) ResetEdge(name string) error {
	switch name {
	case eatinghistory.EdgeMealplan:
		m.ResetMealplan()
		return nil
	case eatinghistory.EdgeFoodmenu:
		m.ResetFoodmenu()
		return nil
	case eatinghistory.EdgeTaste:
		m.ResetTaste()
		return nil
	case eatinghistory.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Eatinghistory edge %s", name)
}

// FoodmenuMutation represents an operation that mutate the Foodmenus
// nodes in the graph.
type FoodmenuMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	menuing               *string
	addedtime             *string
	groupid               *int
	addgroupid            *int
	typeid                *int
	addtypeid             *int
	calories              *int
	addcalories           *int
	clearedFields         map[string]struct{}
	owner                 *int
	clearedowner          bool
	eatinghistorys        map[int]struct{}
	removedeatinghistorys map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Foodmenu, error)
}

var _ ent.Mutation = (*FoodmenuMutation)(nil)

// foodmenuOption allows to manage the mutation configuration using functional options.
type foodmenuOption func(*FoodmenuMutation)

// newFoodmenuMutation creates new mutation for $n.Name.
func newFoodmenuMutation(c config, op Op, opts ...foodmenuOption) *FoodmenuMutation {
	m := &FoodmenuMutation{
		config:        c,
		op:            op,
		typ:           TypeFoodmenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoodmenuID sets the id field of the mutation.
func withFoodmenuID(id int) foodmenuOption {
	return func(m *FoodmenuMutation) {
		var (
			err   error
			once  sync.Once
			value *Foodmenu
		)
		m.oldValue = func(ctx context.Context) (*Foodmenu, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Foodmenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFoodmenu sets the old Foodmenu of the mutation.
func withFoodmenu(node *Foodmenu) foodmenuOption {
	return func(m *FoodmenuMutation) {
		m.oldValue = func(context.Context) (*Foodmenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoodmenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoodmenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FoodmenuMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *FoodmenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *FoodmenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *FoodmenuMutation) ResetName() {
	m.name = nil
}

// SetMenuing sets the menuing field.
func (m *FoodmenuMutation) SetMenuing(s string) {
	m.menuing = &s
}

// Menuing returns the menuing value in the mutation.
func (m *FoodmenuMutation) Menuing() (r string, exists bool) {
	v := m.menuing
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuing returns the old menuing value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldMenuing(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMenuing is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMenuing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuing: %w", err)
	}
	return oldValue.Menuing, nil
}

// ResetMenuing reset all changes of the "menuing" field.
func (m *FoodmenuMutation) ResetMenuing() {
	m.menuing = nil
}

// SetAddedtime sets the addedtime field.
func (m *FoodmenuMutation) SetAddedtime(s string) {
	m.addedtime = &s
}

// Addedtime returns the addedtime value in the mutation.
func (m *FoodmenuMutation) Addedtime() (r string, exists bool) {
	v := m.addedtime
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedtime returns the old addedtime value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldAddedtime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedtime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedtime: %w", err)
	}
	return oldValue.Addedtime, nil
}

// ResetAddedtime reset all changes of the "addedtime" field.
func (m *FoodmenuMutation) ResetAddedtime() {
	m.addedtime = nil
}

// SetGroupid sets the groupid field.
func (m *FoodmenuMutation) SetGroupid(i int) {
	m.groupid = &i
	m.addgroupid = nil
}

// Groupid returns the groupid value in the mutation.
func (m *FoodmenuMutation) Groupid() (r int, exists bool) {
	v := m.groupid
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupid returns the old groupid value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldGroupid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGroupid is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGroupid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupid: %w", err)
	}
	return oldValue.Groupid, nil
}

// AddGroupid adds i to groupid.
func (m *FoodmenuMutation) AddGroupid(i int) {
	if m.addgroupid != nil {
		*m.addgroupid += i
	} else {
		m.addgroupid = &i
	}
}

// AddedGroupid returns the value that was added to the groupid field in this mutation.
func (m *FoodmenuMutation) AddedGroupid() (r int, exists bool) {
	v := m.addgroupid
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupid reset all changes of the "groupid" field.
func (m *FoodmenuMutation) ResetGroupid() {
	m.groupid = nil
	m.addgroupid = nil
}

// SetTypeid sets the typeid field.
func (m *FoodmenuMutation) SetTypeid(i int) {
	m.typeid = &i
	m.addtypeid = nil
}

// Typeid returns the typeid value in the mutation.
func (m *FoodmenuMutation) Typeid() (r int, exists bool) {
	v := m.typeid
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeid returns the old typeid value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldTypeid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeid is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeid: %w", err)
	}
	return oldValue.Typeid, nil
}

// AddTypeid adds i to typeid.
func (m *FoodmenuMutation) AddTypeid(i int) {
	if m.addtypeid != nil {
		*m.addtypeid += i
	} else {
		m.addtypeid = &i
	}
}

// AddedTypeid returns the value that was added to the typeid field in this mutation.
func (m *FoodmenuMutation) AddedTypeid() (r int, exists bool) {
	v := m.addtypeid
	if v == nil {
		return
	}
	return *v, true
}

// ResetTypeid reset all changes of the "typeid" field.
func (m *FoodmenuMutation) ResetTypeid() {
	m.typeid = nil
	m.addtypeid = nil
}

// SetCalories sets the calories field.
func (m *FoodmenuMutation) SetCalories(i int) {
	m.calories = &i
	m.addcalories = nil
}

// Calories returns the calories value in the mutation.
func (m *FoodmenuMutation) Calories() (r int, exists bool) {
	v := m.calories
	if v == nil {
		return
	}
	return *v, true
}

// OldCalories returns the old calories value of the Foodmenu.
// If the Foodmenu object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FoodmenuMutation) OldCalories(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCalories is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCalories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCalories: %w", err)
	}
	return oldValue.Calories, nil
}

// AddCalories adds i to calories.
func (m *FoodmenuMutation) AddCalories(i int) {
	if m.addcalories != nil {
		*m.addcalories += i
	} else {
		m.addcalories = &i
	}
}

// AddedCalories returns the value that was added to the calories field in this mutation.
func (m *FoodmenuMutation) AddedCalories() (r int, exists bool) {
	v := m.addcalories
	if v == nil {
		return
	}
	return *v, true
}

// ResetCalories reset all changes of the "calories" field.
func (m *FoodmenuMutation) ResetCalories() {
	m.calories = nil
	m.addcalories = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *FoodmenuMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *FoodmenuMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *FoodmenuMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *FoodmenuMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *FoodmenuMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *FoodmenuMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddEatinghistoryIDs adds the eatinghistorys edge to Eatinghistory by ids.
func (m *FoodmenuMutation) AddEatinghistoryIDs(ids ...int) {
	if m.eatinghistorys == nil {
		m.eatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.eatinghistorys[ids[i]] = struct{}{}
	}
}

// RemoveEatinghistoryIDs removes the eatinghistorys edge to Eatinghistory by ids.
func (m *FoodmenuMutation) RemoveEatinghistoryIDs(ids ...int) {
	if m.removedeatinghistorys == nil {
		m.removedeatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedeatinghistorys[ids[i]] = struct{}{}
	}
}

// RemovedEatinghistorys returns the removed ids of eatinghistorys.
func (m *FoodmenuMutation) RemovedEatinghistorysIDs() (ids []int) {
	for id := range m.removedeatinghistorys {
		ids = append(ids, id)
	}
	return
}

// EatinghistorysIDs returns the eatinghistorys ids in the mutation.
func (m *FoodmenuMutation) EatinghistorysIDs() (ids []int) {
	for id := range m.eatinghistorys {
		ids = append(ids, id)
	}
	return
}

// ResetEatinghistorys reset all changes of the "eatinghistorys" edge.
func (m *FoodmenuMutation) ResetEatinghistorys() {
	m.eatinghistorys = nil
	m.removedeatinghistorys = nil
}

// Op returns the operation name.
func (m *FoodmenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Foodmenu).
func (m *FoodmenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FoodmenuMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, foodmenu.FieldName)
	}
	if m.menuing != nil {
		fields = append(fields, foodmenu.FieldMenuing)
	}
	if m.addedtime != nil {
		fields = append(fields, foodmenu.FieldAddedtime)
	}
	if m.groupid != nil {
		fields = append(fields, foodmenu.FieldGroupid)
	}
	if m.typeid != nil {
		fields = append(fields, foodmenu.FieldTypeid)
	}
	if m.calories != nil {
		fields = append(fields, foodmenu.FieldCalories)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FoodmenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case foodmenu.FieldName:
		return m.Name()
	case foodmenu.FieldMenuing:
		return m.Menuing()
	case foodmenu.FieldAddedtime:
		return m.Addedtime()
	case foodmenu.FieldGroupid:
		return m.Groupid()
	case foodmenu.FieldTypeid:
		return m.Typeid()
	case foodmenu.FieldCalories:
		return m.Calories()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FoodmenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case foodmenu.FieldName:
		return m.OldName(ctx)
	case foodmenu.FieldMenuing:
		return m.OldMenuing(ctx)
	case foodmenu.FieldAddedtime:
		return m.OldAddedtime(ctx)
	case foodmenu.FieldGroupid:
		return m.OldGroupid(ctx)
	case foodmenu.FieldTypeid:
		return m.OldTypeid(ctx)
	case foodmenu.FieldCalories:
		return m.OldCalories(ctx)
	}
	return nil, fmt.Errorf("unknown Foodmenu field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FoodmenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case foodmenu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case foodmenu.FieldMenuing:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuing(v)
		return nil
	case foodmenu.FieldAddedtime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedtime(v)
		return nil
	case foodmenu.FieldGroupid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupid(v)
		return nil
	case foodmenu.FieldTypeid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeid(v)
		return nil
	case foodmenu.FieldCalories:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCalories(v)
		return nil
	}
	return fmt.Errorf("unknown Foodmenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FoodmenuMutation) AddedFields() []string {
	var fields []string
	if m.addgroupid != nil {
		fields = append(fields, foodmenu.FieldGroupid)
	}
	if m.addtypeid != nil {
		fields = append(fields, foodmenu.FieldTypeid)
	}
	if m.addcalories != nil {
		fields = append(fields, foodmenu.FieldCalories)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FoodmenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case foodmenu.FieldGroupid:
		return m.AddedGroupid()
	case foodmenu.FieldTypeid:
		return m.AddedTypeid()
	case foodmenu.FieldCalories:
		return m.AddedCalories()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FoodmenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case foodmenu.FieldGroupid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupid(v)
		return nil
	case foodmenu.FieldTypeid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTypeid(v)
		return nil
	case foodmenu.FieldCalories:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCalories(v)
		return nil
	}
	return fmt.Errorf("unknown Foodmenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FoodmenuMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FoodmenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoodmenuMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Foodmenu nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FoodmenuMutation) ResetField(name string) error {
	switch name {
	case foodmenu.FieldName:
		m.ResetName()
		return nil
	case foodmenu.FieldMenuing:
		m.ResetMenuing()
		return nil
	case foodmenu.FieldAddedtime:
		m.ResetAddedtime()
		return nil
	case foodmenu.FieldGroupid:
		m.ResetGroupid()
		return nil
	case foodmenu.FieldTypeid:
		m.ResetTypeid()
		return nil
	case foodmenu.FieldCalories:
		m.ResetCalories()
		return nil
	}
	return fmt.Errorf("unknown Foodmenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FoodmenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, foodmenu.EdgeOwner)
	}
	if m.eatinghistorys != nil {
		edges = append(edges, foodmenu.EdgeEatinghistorys)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FoodmenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foodmenu.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case foodmenu.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.eatinghistorys))
		for id := range m.eatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FoodmenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedeatinghistorys != nil {
		edges = append(edges, foodmenu.EdgeEatinghistorys)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FoodmenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case foodmenu.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.removedeatinghistorys))
		for id := range m.removedeatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FoodmenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, foodmenu.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FoodmenuMutation) EdgeCleared(name string) bool {
	switch name {
	case foodmenu.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FoodmenuMutation) ClearEdge(name string) error {
	switch name {
	case foodmenu.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Foodmenu unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FoodmenuMutation) ResetEdge(name string) error {
	switch name {
	case foodmenu.EdgeOwner:
		m.ResetOwner()
		return nil
	case foodmenu.EdgeEatinghistorys:
		m.ResetEatinghistorys()
		return nil
	}
	return fmt.Errorf("unknown Foodmenu edge %s", name)
}

// MealplanMutation represents an operation that mutate the Mealplans
// nodes in the graph.
type MealplanMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	date                  *string
	food_id               *int
	addfood_id            *int
	meal_id               *int
	addmeal_id            *int
	clearedFields         map[string]struct{}
	owner                 *int
	clearedowner          bool
	eatinghistorys        map[int]struct{}
	removedeatinghistorys map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Mealplan, error)
}

var _ ent.Mutation = (*MealplanMutation)(nil)

// mealplanOption allows to manage the mutation configuration using functional options.
type mealplanOption func(*MealplanMutation)

// newMealplanMutation creates new mutation for $n.Name.
func newMealplanMutation(c config, op Op, opts ...mealplanOption) *MealplanMutation {
	m := &MealplanMutation{
		config:        c,
		op:            op,
		typ:           TypeMealplan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMealplanID sets the id field of the mutation.
func withMealplanID(id int) mealplanOption {
	return func(m *MealplanMutation) {
		var (
			err   error
			once  sync.Once
			value *Mealplan
		)
		m.oldValue = func(ctx context.Context) (*Mealplan, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mealplan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMealplan sets the old Mealplan of the mutation.
func withMealplan(node *Mealplan) mealplanOption {
	return func(m *MealplanMutation) {
		m.oldValue = func(context.Context) (*Mealplan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MealplanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MealplanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MealplanMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the date field.
func (m *MealplanMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the date value in the mutation.
func (m *MealplanMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old date value of the Mealplan.
// If the Mealplan object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MealplanMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate reset all changes of the "date" field.
func (m *MealplanMutation) ResetDate() {
	m.date = nil
}

// SetFoodID sets the food_id field.
func (m *MealplanMutation) SetFoodID(i int) {
	m.food_id = &i
	m.addfood_id = nil
}

// FoodID returns the food_id value in the mutation.
func (m *MealplanMutation) FoodID() (r int, exists bool) {
	v := m.food_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFoodID returns the old food_id value of the Mealplan.
// If the Mealplan object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MealplanMutation) OldFoodID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFoodID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFoodID: %w", err)
	}
	return oldValue.FoodID, nil
}

// AddFoodID adds i to food_id.
func (m *MealplanMutation) AddFoodID(i int) {
	if m.addfood_id != nil {
		*m.addfood_id += i
	} else {
		m.addfood_id = &i
	}
}

// AddedFoodID returns the value that was added to the food_id field in this mutation.
func (m *MealplanMutation) AddedFoodID() (r int, exists bool) {
	v := m.addfood_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFoodID reset all changes of the "food_id" field.
func (m *MealplanMutation) ResetFoodID() {
	m.food_id = nil
	m.addfood_id = nil
}

// SetMealID sets the meal_id field.
func (m *MealplanMutation) SetMealID(i int) {
	m.meal_id = &i
	m.addmeal_id = nil
}

// MealID returns the meal_id value in the mutation.
func (m *MealplanMutation) MealID() (r int, exists bool) {
	v := m.meal_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMealID returns the old meal_id value of the Mealplan.
// If the Mealplan object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MealplanMutation) OldMealID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMealID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMealID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMealID: %w", err)
	}
	return oldValue.MealID, nil
}

// AddMealID adds i to meal_id.
func (m *MealplanMutation) AddMealID(i int) {
	if m.addmeal_id != nil {
		*m.addmeal_id += i
	} else {
		m.addmeal_id = &i
	}
}

// AddedMealID returns the value that was added to the meal_id field in this mutation.
func (m *MealplanMutation) AddedMealID() (r int, exists bool) {
	v := m.addmeal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMealID reset all changes of the "meal_id" field.
func (m *MealplanMutation) ResetMealID() {
	m.meal_id = nil
	m.addmeal_id = nil
}

// SetOwnerID sets the owner edge to User by id.
func (m *MealplanMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the owner edge to User.
func (m *MealplanMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *MealplanMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the owner id in the mutation.
func (m *MealplanMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MealplanMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *MealplanMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddEatinghistoryIDs adds the eatinghistorys edge to Eatinghistory by ids.
func (m *MealplanMutation) AddEatinghistoryIDs(ids ...int) {
	if m.eatinghistorys == nil {
		m.eatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.eatinghistorys[ids[i]] = struct{}{}
	}
}

// RemoveEatinghistoryIDs removes the eatinghistorys edge to Eatinghistory by ids.
func (m *MealplanMutation) RemoveEatinghistoryIDs(ids ...int) {
	if m.removedeatinghistorys == nil {
		m.removedeatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedeatinghistorys[ids[i]] = struct{}{}
	}
}

// RemovedEatinghistorys returns the removed ids of eatinghistorys.
func (m *MealplanMutation) RemovedEatinghistorysIDs() (ids []int) {
	for id := range m.removedeatinghistorys {
		ids = append(ids, id)
	}
	return
}

// EatinghistorysIDs returns the eatinghistorys ids in the mutation.
func (m *MealplanMutation) EatinghistorysIDs() (ids []int) {
	for id := range m.eatinghistorys {
		ids = append(ids, id)
	}
	return
}

// ResetEatinghistorys reset all changes of the "eatinghistorys" edge.
func (m *MealplanMutation) ResetEatinghistorys() {
	m.eatinghistorys = nil
	m.removedeatinghistorys = nil
}

// Op returns the operation name.
func (m *MealplanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Mealplan).
func (m *MealplanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MealplanMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.date != nil {
		fields = append(fields, mealplan.FieldDate)
	}
	if m.food_id != nil {
		fields = append(fields, mealplan.FieldFoodID)
	}
	if m.meal_id != nil {
		fields = append(fields, mealplan.FieldMealID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MealplanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mealplan.FieldDate:
		return m.Date()
	case mealplan.FieldFoodID:
		return m.FoodID()
	case mealplan.FieldMealID:
		return m.MealID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MealplanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mealplan.FieldDate:
		return m.OldDate(ctx)
	case mealplan.FieldFoodID:
		return m.OldFoodID(ctx)
	case mealplan.FieldMealID:
		return m.OldMealID(ctx)
	}
	return nil, fmt.Errorf("unknown Mealplan field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealplanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mealplan.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case mealplan.FieldFoodID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFoodID(v)
		return nil
	case mealplan.FieldMealID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMealID(v)
		return nil
	}
	return fmt.Errorf("unknown Mealplan field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MealplanMutation) AddedFields() []string {
	var fields []string
	if m.addfood_id != nil {
		fields = append(fields, mealplan.FieldFoodID)
	}
	if m.addmeal_id != nil {
		fields = append(fields, mealplan.FieldMealID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MealplanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mealplan.FieldFoodID:
		return m.AddedFoodID()
	case mealplan.FieldMealID:
		return m.AddedMealID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MealplanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mealplan.FieldFoodID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFoodID(v)
		return nil
	case mealplan.FieldMealID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMealID(v)
		return nil
	}
	return fmt.Errorf("unknown Mealplan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MealplanMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MealplanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MealplanMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mealplan nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MealplanMutation) ResetField(name string) error {
	switch name {
	case mealplan.FieldDate:
		m.ResetDate()
		return nil
	case mealplan.FieldFoodID:
		m.ResetFoodID()
		return nil
	case mealplan.FieldMealID:
		m.ResetMealID()
		return nil
	}
	return fmt.Errorf("unknown Mealplan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MealplanMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, mealplan.EdgeOwner)
	}
	if m.eatinghistorys != nil {
		edges = append(edges, mealplan.EdgeEatinghistorys)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MealplanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mealplan.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case mealplan.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.eatinghistorys))
		for id := range m.eatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MealplanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedeatinghistorys != nil {
		edges = append(edges, mealplan.EdgeEatinghistorys)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MealplanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mealplan.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.removedeatinghistorys))
		for id := range m.removedeatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MealplanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, mealplan.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MealplanMutation) EdgeCleared(name string) bool {
	switch name {
	case mealplan.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MealplanMutation) ClearEdge(name string) error {
	switch name {
	case mealplan.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Mealplan unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MealplanMutation) ResetEdge(name string) error {
	switch name {
	case mealplan.EdgeOwner:
		m.ResetOwner()
		return nil
	case mealplan.EdgeEatinghistorys:
		m.ResetEatinghistorys()
		return nil
	}
	return fmt.Errorf("unknown Mealplan edge %s", name)
}

// TasteMutation represents an operation that mutate the Tastes
// nodes in the graph.
type TasteMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	taste                 *string
	clearedFields         map[string]struct{}
	eatinghistorys        map[int]struct{}
	removedeatinghistorys map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Taste, error)
}

var _ ent.Mutation = (*TasteMutation)(nil)

// tasteOption allows to manage the mutation configuration using functional options.
type tasteOption func(*TasteMutation)

// newTasteMutation creates new mutation for $n.Name.
func newTasteMutation(c config, op Op, opts ...tasteOption) *TasteMutation {
	m := &TasteMutation{
		config:        c,
		op:            op,
		typ:           TypeTaste,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTasteID sets the id field of the mutation.
func withTasteID(id int) tasteOption {
	return func(m *TasteMutation) {
		var (
			err   error
			once  sync.Once
			value *Taste
		)
		m.oldValue = func(ctx context.Context) (*Taste, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Taste.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaste sets the old Taste of the mutation.
func withTaste(node *Taste) tasteOption {
	return func(m *TasteMutation) {
		m.oldValue = func(context.Context) (*Taste, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TasteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TasteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TasteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTaste sets the taste field.
func (m *TasteMutation) SetTaste(s string) {
	m.taste = &s
}

// Taste returns the taste value in the mutation.
func (m *TasteMutation) Taste() (r string, exists bool) {
	v := m.taste
	if v == nil {
		return
	}
	return *v, true
}

// OldTaste returns the old taste value of the Taste.
// If the Taste object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TasteMutation) OldTaste(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTaste is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTaste requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaste: %w", err)
	}
	return oldValue.Taste, nil
}

// ResetTaste reset all changes of the "taste" field.
func (m *TasteMutation) ResetTaste() {
	m.taste = nil
}

// AddEatinghistoryIDs adds the eatinghistorys edge to Eatinghistory by ids.
func (m *TasteMutation) AddEatinghistoryIDs(ids ...int) {
	if m.eatinghistorys == nil {
		m.eatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.eatinghistorys[ids[i]] = struct{}{}
	}
}

// RemoveEatinghistoryIDs removes the eatinghistorys edge to Eatinghistory by ids.
func (m *TasteMutation) RemoveEatinghistoryIDs(ids ...int) {
	if m.removedeatinghistorys == nil {
		m.removedeatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedeatinghistorys[ids[i]] = struct{}{}
	}
}

// RemovedEatinghistorys returns the removed ids of eatinghistorys.
func (m *TasteMutation) RemovedEatinghistorysIDs() (ids []int) {
	for id := range m.removedeatinghistorys {
		ids = append(ids, id)
	}
	return
}

// EatinghistorysIDs returns the eatinghistorys ids in the mutation.
func (m *TasteMutation) EatinghistorysIDs() (ids []int) {
	for id := range m.eatinghistorys {
		ids = append(ids, id)
	}
	return
}

// ResetEatinghistorys reset all changes of the "eatinghistorys" edge.
func (m *TasteMutation) ResetEatinghistorys() {
	m.eatinghistorys = nil
	m.removedeatinghistorys = nil
}

// Op returns the operation name.
func (m *TasteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Taste).
func (m *TasteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TasteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.taste != nil {
		fields = append(fields, taste.FieldTaste)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TasteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taste.FieldTaste:
		return m.Taste()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TasteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taste.FieldTaste:
		return m.OldTaste(ctx)
	}
	return nil, fmt.Errorf("unknown Taste field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TasteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taste.FieldTaste:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaste(v)
		return nil
	}
	return fmt.Errorf("unknown Taste field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TasteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TasteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TasteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Taste numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TasteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TasteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TasteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Taste nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TasteMutation) ResetField(name string) error {
	switch name {
	case taste.FieldTaste:
		m.ResetTaste()
		return nil
	}
	return fmt.Errorf("unknown Taste field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TasteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.eatinghistorys != nil {
		edges = append(edges, taste.EdgeEatinghistorys)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TasteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case taste.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.eatinghistorys))
		for id := range m.eatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TasteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedeatinghistorys != nil {
		edges = append(edges, taste.EdgeEatinghistorys)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TasteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case taste.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.removedeatinghistorys))
		for id := range m.removedeatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TasteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TasteMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TasteMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Taste unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TasteMutation) ResetEdge(name string) error {
	switch name {
	case taste.EdgeEatinghistorys:
		m.ResetEatinghistorys()
		return nil
	}
	return fmt.Errorf("unknown Taste edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	email                 *string
	clearedFields         map[string]struct{}
	foodmenus             map[int]struct{}
	removedfoodmenus      map[int]struct{}
	mealplans             map[int]struct{}
	removedmealplans      map[int]struct{}
	eatinghistorys        map[int]struct{}
	removedeatinghistorys map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// AddFoodmenuIDs adds the foodmenus edge to Foodmenu by ids.
func (m *UserMutation) AddFoodmenuIDs(ids ...int) {
	if m.foodmenus == nil {
		m.foodmenus = make(map[int]struct{})
	}
	for i := range ids {
		m.foodmenus[ids[i]] = struct{}{}
	}
}

// RemoveFoodmenuIDs removes the foodmenus edge to Foodmenu by ids.
func (m *UserMutation) RemoveFoodmenuIDs(ids ...int) {
	if m.removedfoodmenus == nil {
		m.removedfoodmenus = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfoodmenus[ids[i]] = struct{}{}
	}
}

// RemovedFoodmenus returns the removed ids of foodmenus.
func (m *UserMutation) RemovedFoodmenusIDs() (ids []int) {
	for id := range m.removedfoodmenus {
		ids = append(ids, id)
	}
	return
}

// FoodmenusIDs returns the foodmenus ids in the mutation.
func (m *UserMutation) FoodmenusIDs() (ids []int) {
	for id := range m.foodmenus {
		ids = append(ids, id)
	}
	return
}

// ResetFoodmenus reset all changes of the "foodmenus" edge.
func (m *UserMutation) ResetFoodmenus() {
	m.foodmenus = nil
	m.removedfoodmenus = nil
}

// AddMealplanIDs adds the mealplans edge to Mealplan by ids.
func (m *UserMutation) AddMealplanIDs(ids ...int) {
	if m.mealplans == nil {
		m.mealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.mealplans[ids[i]] = struct{}{}
	}
}

// RemoveMealplanIDs removes the mealplans edge to Mealplan by ids.
func (m *UserMutation) RemoveMealplanIDs(ids ...int) {
	if m.removedmealplans == nil {
		m.removedmealplans = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmealplans[ids[i]] = struct{}{}
	}
}

// RemovedMealplans returns the removed ids of mealplans.
func (m *UserMutation) RemovedMealplansIDs() (ids []int) {
	for id := range m.removedmealplans {
		ids = append(ids, id)
	}
	return
}

// MealplansIDs returns the mealplans ids in the mutation.
func (m *UserMutation) MealplansIDs() (ids []int) {
	for id := range m.mealplans {
		ids = append(ids, id)
	}
	return
}

// ResetMealplans reset all changes of the "mealplans" edge.
func (m *UserMutation) ResetMealplans() {
	m.mealplans = nil
	m.removedmealplans = nil
}

// AddEatinghistoryIDs adds the eatinghistorys edge to Eatinghistory by ids.
func (m *UserMutation) AddEatinghistoryIDs(ids ...int) {
	if m.eatinghistorys == nil {
		m.eatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.eatinghistorys[ids[i]] = struct{}{}
	}
}

// RemoveEatinghistoryIDs removes the eatinghistorys edge to Eatinghistory by ids.
func (m *UserMutation) RemoveEatinghistoryIDs(ids ...int) {
	if m.removedeatinghistorys == nil {
		m.removedeatinghistorys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedeatinghistorys[ids[i]] = struct{}{}
	}
}

// RemovedEatinghistorys returns the removed ids of eatinghistorys.
func (m *UserMutation) RemovedEatinghistorysIDs() (ids []int) {
	for id := range m.removedeatinghistorys {
		ids = append(ids, id)
	}
	return
}

// EatinghistorysIDs returns the eatinghistorys ids in the mutation.
func (m *UserMutation) EatinghistorysIDs() (ids []int) {
	for id := range m.eatinghistorys {
		ids = append(ids, id)
	}
	return
}

// ResetEatinghistorys reset all changes of the "eatinghistorys" edge.
func (m *UserMutation) ResetEatinghistorys() {
	m.eatinghistorys = nil
	m.removedeatinghistorys = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.foodmenus != nil {
		edges = append(edges, user.EdgeFoodmenus)
	}
	if m.mealplans != nil {
		edges = append(edges, user.EdgeMealplans)
	}
	if m.eatinghistorys != nil {
		edges = append(edges, user.EdgeEatinghistorys)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFoodmenus:
		ids := make([]ent.Value, 0, len(m.foodmenus))
		for id := range m.foodmenus {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.mealplans))
		for id := range m.mealplans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.eatinghistorys))
		for id := range m.eatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfoodmenus != nil {
		edges = append(edges, user.EdgeFoodmenus)
	}
	if m.removedmealplans != nil {
		edges = append(edges, user.EdgeMealplans)
	}
	if m.removedeatinghistorys != nil {
		edges = append(edges, user.EdgeEatinghistorys)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFoodmenus:
		ids := make([]ent.Value, 0, len(m.removedfoodmenus))
		for id := range m.removedfoodmenus {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMealplans:
		ids := make([]ent.Value, 0, len(m.removedmealplans))
		for id := range m.removedmealplans {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEatinghistorys:
		ids := make([]ent.Value, 0, len(m.removedeatinghistorys))
		for id := range m.removedeatinghistorys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFoodmenus:
		m.ResetFoodmenus()
		return nil
	case user.EdgeMealplans:
		m.ResetMealplans()
		return nil
	case user.EdgeEatinghistorys:
		m.ResetEatinghistorys()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
