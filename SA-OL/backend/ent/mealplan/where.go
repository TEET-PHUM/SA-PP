// Code generated by entc, DO NOT EDIT.

package mealplan

import (
	"github.com/Teeth/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// FoodID applies equality check predicate on the "food_id" field. It's identical to FoodIDEQ.
func FoodID(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFoodID), v))
	})
}

// MealID applies equality check predicate on the "meal_id" field. It's identical to MealIDEQ.
func MealID(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMealID), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDate), v))
	})
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDate), v))
	})
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDate), v))
	})
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDate), v))
	})
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDate), v))
	})
}

// FoodIDEQ applies the EQ predicate on the "food_id" field.
func FoodIDEQ(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFoodID), v))
	})
}

// FoodIDNEQ applies the NEQ predicate on the "food_id" field.
func FoodIDNEQ(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFoodID), v))
	})
}

// FoodIDIn applies the In predicate on the "food_id" field.
func FoodIDIn(vs ...int) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFoodID), v...))
	})
}

// FoodIDNotIn applies the NotIn predicate on the "food_id" field.
func FoodIDNotIn(vs ...int) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFoodID), v...))
	})
}

// FoodIDGT applies the GT predicate on the "food_id" field.
func FoodIDGT(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFoodID), v))
	})
}

// FoodIDGTE applies the GTE predicate on the "food_id" field.
func FoodIDGTE(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFoodID), v))
	})
}

// FoodIDLT applies the LT predicate on the "food_id" field.
func FoodIDLT(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFoodID), v))
	})
}

// FoodIDLTE applies the LTE predicate on the "food_id" field.
func FoodIDLTE(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFoodID), v))
	})
}

// MealIDEQ applies the EQ predicate on the "meal_id" field.
func MealIDEQ(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMealID), v))
	})
}

// MealIDNEQ applies the NEQ predicate on the "meal_id" field.
func MealIDNEQ(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMealID), v))
	})
}

// MealIDIn applies the In predicate on the "meal_id" field.
func MealIDIn(vs ...int) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMealID), v...))
	})
}

// MealIDNotIn applies the NotIn predicate on the "meal_id" field.
func MealIDNotIn(vs ...int) predicate.Mealplan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Mealplan(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMealID), v...))
	})
}

// MealIDGT applies the GT predicate on the "meal_id" field.
func MealIDGT(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMealID), v))
	})
}

// MealIDGTE applies the GTE predicate on the "meal_id" field.
func MealIDGTE(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMealID), v))
	})
}

// MealIDLT applies the LT predicate on the "meal_id" field.
func MealIDLT(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMealID), v))
	})
}

// MealIDLTE applies the LTE predicate on the "meal_id" field.
func MealIDLTE(v int) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMealID), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEatinghistorys applies the HasEdge predicate on the "eatinghistorys" edge.
func HasEatinghistorys() predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EatinghistorysTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EatinghistorysTable, EatinghistorysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEatinghistorysWith applies the HasEdge predicate on the "eatinghistorys" edge with a given conditions (other predicates).
func HasEatinghistorysWith(preds ...predicate.Eatinghistory) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EatinghistorysInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EatinghistorysTable, EatinghistorysColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Mealplan) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Mealplan) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mealplan) predicate.Mealplan {
	return predicate.Mealplan(func(s *sql.Selector) {
		p(s.Not())
	})
}
