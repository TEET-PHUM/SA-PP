// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MealplanCreate is the builder for creating a Mealplan entity.
type MealplanCreate struct {
	config
	mutation *MealplanMutation
	hooks    []Hook
}

// SetDate sets the date field.
func (mc *MealplanCreate) SetDate(s string) *MealplanCreate {
	mc.mutation.SetDate(s)
	return mc
}

// SetFoodID sets the food_id field.
func (mc *MealplanCreate) SetFoodID(i int) *MealplanCreate {
	mc.mutation.SetFoodID(i)
	return mc
}

// SetMealID sets the meal_id field.
func (mc *MealplanCreate) SetMealID(i int) *MealplanCreate {
	mc.mutation.SetMealID(i)
	return mc
}

// SetOwnerID sets the owner edge to User by id.
func (mc *MealplanCreate) SetOwnerID(id int) *MealplanCreate {
	mc.mutation.SetOwnerID(id)
	return mc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (mc *MealplanCreate) SetNillableOwnerID(id *int) *MealplanCreate {
	if id != nil {
		mc = mc.SetOwnerID(*id)
	}
	return mc
}

// SetOwner sets the owner edge to User.
func (mc *MealplanCreate) SetOwner(u *User) *MealplanCreate {
	return mc.SetOwnerID(u.ID)
}

// AddEatinghistoryIDs adds the eatinghistorys edge to Eatinghistory by ids.
func (mc *MealplanCreate) AddEatinghistoryIDs(ids ...int) *MealplanCreate {
	mc.mutation.AddEatinghistoryIDs(ids...)
	return mc
}

// AddEatinghistorys adds the eatinghistorys edges to Eatinghistory.
func (mc *MealplanCreate) AddEatinghistorys(e ...*Eatinghistory) *MealplanCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mc.AddEatinghistoryIDs(ids...)
}

// Mutation returns the MealplanMutation object of the builder.
func (mc *MealplanCreate) Mutation() *MealplanMutation {
	return mc.mutation
}

// Save creates the Mealplan in the database.
func (mc *MealplanCreate) Save(ctx context.Context) (*Mealplan, error) {
	if _, ok := mc.mutation.Date(); !ok {
		return nil, &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	if v, ok := mc.mutation.Date(); ok {
		if err := mealplan.DateValidator(v); err != nil {
			return nil, &ValidationError{Name: "date", err: fmt.Errorf("ent: validator failed for field \"date\": %w", err)}
		}
	}
	if _, ok := mc.mutation.FoodID(); !ok {
		return nil, &ValidationError{Name: "food_id", err: errors.New("ent: missing required field \"food_id\"")}
	}
	if v, ok := mc.mutation.FoodID(); ok {
		if err := mealplan.FoodIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "food_id", err: fmt.Errorf("ent: validator failed for field \"food_id\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MealID(); !ok {
		return nil, &ValidationError{Name: "meal_id", err: errors.New("ent: missing required field \"meal_id\"")}
	}
	if v, ok := mc.mutation.MealID(); ok {
		if err := mealplan.MealIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "meal_id", err: fmt.Errorf("ent: validator failed for field \"meal_id\": %w", err)}
		}
	}
	var (
		err  error
		node *Mealplan
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MealplanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MealplanCreate) SaveX(ctx context.Context) *Mealplan {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MealplanCreate) sqlSave(ctx context.Context) (*Mealplan, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MealplanCreate) createSpec() (*Mealplan, *sqlgraph.CreateSpec) {
	var (
		m     = &Mealplan{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mealplan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mealplan.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mealplan.FieldDate,
		})
		m.Date = value
	}
	if value, ok := mc.mutation.FoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mealplan.FieldFoodID,
		})
		m.FoodID = value
	}
	if value, ok := mc.mutation.MealID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: mealplan.FieldMealID,
		})
		m.MealID = value
	}
	if nodes := mc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mealplan.OwnerTable,
			Columns: []string{mealplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.EatinghistorysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mealplan.EatinghistorysTable,
			Columns: []string{mealplan.EatinghistorysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eatinghistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return m, _spec
}
