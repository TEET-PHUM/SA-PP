// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/schema"
	"github.com/Teeth/app/ent/taste"
	"github.com/Teeth/app/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	foodmenuFields := schema.Foodmenu{}.Fields()
	_ = foodmenuFields
	// foodmenuDescName is the schema descriptor for name field.
	foodmenuDescName := foodmenuFields[0].Descriptor()
	// foodmenu.NameValidator is a validator for the "name" field. It is called by the builders before save.
	foodmenu.NameValidator = foodmenuDescName.Validators[0].(func(string) error)
	// foodmenuDescMenuing is the schema descriptor for menuing field.
	foodmenuDescMenuing := foodmenuFields[1].Descriptor()
	// foodmenu.MenuingValidator is a validator for the "menuing" field. It is called by the builders before save.
	foodmenu.MenuingValidator = foodmenuDescMenuing.Validators[0].(func(string) error)
	// foodmenuDescAddedtime is the schema descriptor for addedtime field.
	foodmenuDescAddedtime := foodmenuFields[2].Descriptor()
	// foodmenu.AddedtimeValidator is a validator for the "addedtime" field. It is called by the builders before save.
	foodmenu.AddedtimeValidator = foodmenuDescAddedtime.Validators[0].(func(string) error)
	// foodmenuDescGroupid is the schema descriptor for groupid field.
	foodmenuDescGroupid := foodmenuFields[3].Descriptor()
	// foodmenu.GroupidValidator is a validator for the "groupid" field. It is called by the builders before save.
	foodmenu.GroupidValidator = foodmenuDescGroupid.Validators[0].(func(int) error)
	// foodmenuDescTypeid is the schema descriptor for typeid field.
	foodmenuDescTypeid := foodmenuFields[4].Descriptor()
	// foodmenu.TypeidValidator is a validator for the "typeid" field. It is called by the builders before save.
	foodmenu.TypeidValidator = foodmenuDescTypeid.Validators[0].(func(int) error)
	// foodmenuDescCalories is the schema descriptor for calories field.
	foodmenuDescCalories := foodmenuFields[5].Descriptor()
	// foodmenu.CaloriesValidator is a validator for the "calories" field. It is called by the builders before save.
	foodmenu.CaloriesValidator = foodmenuDescCalories.Validators[0].(func(int) error)
	mealplanFields := schema.Mealplan{}.Fields()
	_ = mealplanFields
	// mealplanDescDate is the schema descriptor for date field.
	mealplanDescDate := mealplanFields[0].Descriptor()
	// mealplan.DateValidator is a validator for the "date" field. It is called by the builders before save.
	mealplan.DateValidator = mealplanDescDate.Validators[0].(func(string) error)
	// mealplanDescFoodID is the schema descriptor for food_id field.
	mealplanDescFoodID := mealplanFields[1].Descriptor()
	// mealplan.FoodIDValidator is a validator for the "food_id" field. It is called by the builders before save.
	mealplan.FoodIDValidator = mealplanDescFoodID.Validators[0].(func(int) error)
	// mealplanDescMealID is the schema descriptor for meal_id field.
	mealplanDescMealID := mealplanFields[2].Descriptor()
	// mealplan.MealIDValidator is a validator for the "meal_id" field. It is called by the builders before save.
	mealplan.MealIDValidator = mealplanDescMealID.Validators[0].(func(int) error)
	tasteFields := schema.Taste{}.Fields()
	_ = tasteFields
	// tasteDescTaste is the schema descriptor for taste field.
	tasteDescTaste := tasteFields[0].Descriptor()
	// taste.TasteValidator is a validator for the "taste" field. It is called by the builders before save.
	taste.TasteValidator = tasteDescTaste.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
