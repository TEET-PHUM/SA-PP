// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Teeth/app/ent/taste"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Taste is the model entity for the Taste schema.
type Taste struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Taste holds the value of the "taste" field.
	Taste string `json:"taste,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TasteQuery when eager-loading is set.
	Edges TasteEdges `json:"edges"`
}

// TasteEdges holds the relations/edges for other nodes in the graph.
type TasteEdges struct {
	// Eatinghistorys holds the value of the eatinghistorys edge.
	Eatinghistorys []*Eatinghistory
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EatinghistorysOrErr returns the Eatinghistorys value or an error if the edge
// was not loaded in eager-loading.
func (e TasteEdges) EatinghistorysOrErr() ([]*Eatinghistory, error) {
	if e.loadedTypes[0] {
		return e.Eatinghistorys, nil
	}
	return nil, &NotLoadedError{edge: "eatinghistorys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Taste) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // taste
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Taste fields.
func (t *Taste) assignValues(values ...interface{}) error {
	if m, n := len(values), len(taste.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field taste", values[0])
	} else if value.Valid {
		t.Taste = value.String
	}
	return nil
}

// QueryEatinghistorys queries the eatinghistorys edge of the Taste.
func (t *Taste) QueryEatinghistorys() *EatinghistoryQuery {
	return (&TasteClient{config: t.config}).QueryEatinghistorys(t)
}

// Update returns a builder for updating this Taste.
// Note that, you need to call Taste.Unwrap() before calling this method, if this Taste
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Taste) Update() *TasteUpdateOne {
	return (&TasteClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Taste) Unwrap() *Taste {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Taste is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Taste) String() string {
	var builder strings.Builder
	builder.WriteString("Taste(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", taste=")
	builder.WriteString(t.Taste)
	builder.WriteByte(')')
	return builder.String()
}

// Tastes is a parsable slice of Taste.
type Tastes []*Taste

func (t Tastes) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
